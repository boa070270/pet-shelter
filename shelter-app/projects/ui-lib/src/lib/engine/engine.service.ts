import {Injectable, OnDestroy} from '@angular/core';
import {Router} from '@angular/router';

/**
 * Опрацьовує модель робочего процесу.
 * Модель дозволяє виконувати запити до локальних і віддалених ресурсів, запитувати користувача через сторінку або діалог,
 * керувати маршрутом, виконувати фонові процеси, послідовні або паралельні дії.
 * Модель будується на наборі полів та їх значень. Дефолтним полем (у випадку якщо не вказано у запиті) є "index".
 * {
 *   field1: Observable<any>,
 *   index: Observable<any>,
 * }
 * Значення завжди Observable, під ним може бути:
 * - запуск лістенерів на евенти
 * - запуск фонових процессів
 * - арифметичні, логічні дії (switch, if/else/then), їх послідовності, чи паралельні процеси
 * - активація роутера
 * - відображення динамічної сторінки чи діалогу
 * - загрузка з серверу моделі робочого процессу, сторінки, форми, датасоурсу
 * - датасоурс чи інші "константи", динамічні сторінка, форми
 * Значенні можуть бути перезаписані.
 *
 * HierarchyPageService допомагає надати данні на динамічну сторінку, також цей сервіс допомагає з DataSource для відображення
 * окремих записів при використанні ng-context.
 *
 * Ієрархія і наслідування.
 * В цій моделі інсує два різних поняття для ієрархії і наслідування.
 * Перше (відноситься до роботи моделі):
 * Якщо значення якогось поля це модель, то модель яка включає це поле є батьківською моделю до цього поля.
 * Батьківська модель може мати багато нащадків, але нащадок може мати тільки одну батькіську модель.
 * Друге (моделювання):
 * Ми можемо створювати модель з іншої моделі використовуючи наслідування.
 * наприклад: ми задали модель Sum: {a: 1, b: 2, index: a + b}, тепер ми задаємо модель Mul extend Sum: {index: a * b}
 * Не потрібно повторювати всі властивості моделі якщо вже існує модель яка задовольняє більшість потреб. Іноді досить
 * змініти одну властивість і отримати іншу поведінку.
 * Наприклад ми міняємо властивість отримання данних з БД на REST.
 *
 */
@Injectable({
  providedIn: 'root'
})
export class EngineService implements OnDestroy {
  // на що я хочу реагувати: зміни в роутері, зміни viewport, евенти від документа / віндовса, http events, background процеси,
  // генерувати ементи при читанні/зміні занчень пропертів моделі
  constructor(router: Router) {
    console.log('constructor EngineService');
    router.events.subscribe(r => {
      console.log(r);
    });
  }

  ngOnDestroy(): void {
    console.log('destroy EngineService');
  }
}

